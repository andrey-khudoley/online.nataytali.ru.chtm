/**
 * Special helper type, which forces TS to use alias instead of resolved type
 * For example, using export type TypeName = Alias<number> will show "TypeName" instead of "number" in hints and errors
 */
export declare type Alias<T> = T & {
  ['??']?: never
}
export declare type AnyObject = Record<string, unknown>
export declare type PublicFieldsOfClass<T> = {
  [Property in keyof T]: T[Property]
}
export declare type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject
export declare type JSONObject = {
  [key: string]: JSONValue
}
/**
 * Plain JSON-like value that may contain undefined
 * It's not a valid JSON but in can be passed as an input and be serialized to JSON
 */
export declare type JSONInputValue = string | number | boolean | null | JSONInputValue[] | JSONInputObject | undefined
export declare type JSONInputObject = {
  [key: string]: JSONInputValue
}
export declare type JSONSerializableValue =
  | string
  | number
  | boolean
  | null
  | JSONSerializableValue[]
  | JSONSerializableObject
  | undefined
export declare type JSONSerializableObject =
  | {
      [key: string]: JSONSerializableValue
    }
  | Date
  | {
      toJSON(): JSONSerializableObject
    }
export declare type FirstElement<T> = T extends [infer First, ...any[]] ? First : never
/**
 * Evaluates to `true` if `T` is `never`.
 */
export declare type IsNever<T> = [T] extends [never] ? true : false
/**
 * Evaluates to `true` if `T` is `any`.
 */
export declare type IsAny<T> = 0 extends T & 1 ? true : false
export declare type SingleOrArray<T> = T | T[]
export declare type PlainOrPromise<T> = T | Promise<T>

export {}
