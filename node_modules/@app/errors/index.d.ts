declare abstract class ChatiumError extends Error {
  abstract readonly statusCode: number
  constructor(message?: string)
}
export declare class NotFoundError extends ChatiumError {
  readonly statusCode = 404
  readonly type: string | undefined
  readonly id: string | number | undefined
  constructor(msg: string)
  constructor(type: string, id: string | number)
}
export declare class AccessDeniedError extends ChatiumError {
  readonly statusCode = 403
  constructor(message?: string)
}
/**
 * Generic custom error, allowing structured pass data from server to client
 */
export declare class CustomError extends Error {
  readonly code: string
  readonly data: Record<string, any>
  constructor(reason: string, code: string, data?: Record<string, any>)
}
export declare class ValidationError extends ChatiumError {
  readonly statusCode = 422
  readonly issues: ValidationIssue[]
  readonly reason?: string
  constructor(issues: ValidationIssue[])
  constructor(reason: string, issues: ValidationIssue[])
  constructor(
    reason: string,
    ajvErrors?: Array<{
      instancePath: string
      message?: string
    }> | null,
  )
  /** @deprecated use issues array instead */
  constructor(reason: string, data?: ValidationErrorData)
  get errors(): ValidationIssue[]
  /** @deprecated use issues or errors */
  get data(): ValidationErrorData
  toString(): string
  get message(): string
  get isEmpty(): boolean
}
interface ValidationIssue {
  fullPath?: string
  message: string
}
declare type ValidationErrorData = ValidationErrorDataFields
interface ValidationErrorDataFields {
  fields: Record<string, string>
}

export {}
