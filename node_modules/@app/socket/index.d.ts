import { JSONInputValue } from 'utils/types'

export declare function genSocketId(ctx: RichUgcCtx, unencodedSocketId: string): Promise<string>
export declare function genSocketId(unencodedSocketId: string): Promise<string>
export declare function updateSocket(ctx: RichUgcCtx, unencodedSocketId: string): Promise<void>
export declare function updateSocket(unencodedSocketId: string): Promise<void>
export declare function sendDataToSocket(
  ctx: RichUgcCtx,
  unencodedSocketId: string,
  data: JSONInputValue,
): Promise<void>
export declare function sendDataToSocket(unencodedSocketId: string, data: JSONInputValue): Promise<void>
export declare const socketDomain: string
export declare const socketClientLibUrls: string[]
export declare function getOrCreateBrowserSocketClient(_options?: { baseUrl?: string }): Promise<SocketClient>
export interface SocketClient {
  connect(): void
  subscribeToSocket(socketId: string, onChange: () => unknown | void, delay?: number): () => void
  subscribeToData(socketId: string): DataSocketSubscription
  subscribeToData<Data = JSONInputValue>(socketId: string, onChange: (data: Data) => unknown | void): () => void
}
export interface DataSocketSubscription {
  listen<Data = JSONInputValue>(onChange: (data: Data) => unknown | void): () => void
  writeToSocket(data: JSONInputValue): void
}

export {}
