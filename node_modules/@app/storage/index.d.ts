import { VideoSize } from 'lib/chatium-json/v1'
import { ImageProps } from 'lib/chatium-json/v2'
import * as sfi from 'modules/storage/StorageFile'
import { JSONInputObject } from 'utils/types'

declare type HashMediaType = 'file' | 'video' | 'image' | 'audio'
export declare function getFileTypeFromHash(hash: string): HashMediaType
export declare function getDurationFromHash(hash: string | undefined): number | undefined
export declare function getSizesFromHash(hash: string | null):
  | {
      width: number
      height: number
    }
  | undefined
interface StorageUploadOptions {
  /** upload a non-public file */
  protected?: boolean
  /** allow only these media types (supported: image | video | audio) */
  mediaType?: HashMediaType | HashMediaType[]
  /** allow only these content type pattern(s) */
  contentType?: string | string[]
  /** allow only these file extensions */
  extension?: string | string[]
  /** minimum file size in bytes */
  minBytes?: number
  /** maximum file size in bytes */
  maxBytes?: number
  /** custom auth session authorizing URL expiration time in seconds, default is a week */
  expiresInSeconds?: number
}
interface StorageFetchOptions extends StorageUploadOptions {
  headers?: Record<string, string>
}
interface VideoInfo {
  hash: string
  url: string | null
  hlsUrl: string | undefined
  mp4Url: string | undefined
  status: FileServiceVideoInfoResponse['status']
  progress: number
  imageUrl: string
  /** @deprecated always undefined */
  videoSize: VideoSize | undefined
  videoAspectRatio: [number, number] | undefined
}
interface AudioInfo {
  hash: string
  duration: number
  format: string
  bitRate: number
  samplingRate: number
  channels: number
}
interface FileServiceVideoInfoResponse {
  status: 'done' | 'processing' | 'error'
  width_aspect_ratio?: number
  height_aspect_ratio?: number
  progress?: number
  kinescopeVideoId?: string | number
  integrosVideoId?: string | number
  cloudflareVideoId?: string | number
}
interface GetPutUrlOptions extends StorageUploadOptions {
  restrictMode?: 'auto' | 'auth' | 'session' | 'public'
}
export declare const StorageFile: sfi.FileClass
export declare const StorageImageFile: sfi.ImageFileClass
export declare const StorageVideoFile: sfi.VideoFileClass
export declare const StorageAudioFile: sfi.AudioFileClass
export declare function isImageFile(file: sfi.StorageFile): file is sfi.StorageImageFile
export declare function isVideoFile(file: sfi.StorageFile): file is sfi.StorageVideoFile
export declare function isAudioFile(file: sfi.StorageFile): file is sfi.StorageAudioFile
export declare function createStorageFileFromHash(hash: string): sfi.StorageFile
/**
 * Returns a URL that can be used as a get_put_url for file upload components -
 *  it authorizes the current user or session to upload files to the file storage on behalf of the current account.
 * Post to the returned URL returns a direct upload URL to the file storage service, like createUploadPutUrl.
 */
export declare function getUploadGetPutUrl(
  ctx: RichUgcCtx,
  options?: Pick<GetPutUrlOptions, 'protected' | 'expiresInSeconds' | 'restrictMode'>,
): string
/**
 * Returns a direct URL to the file storage service to upload a file.
 * By default, the URL is valid for 10 minutes, but it can be adjusted via the expiresInSeconds option.
 * Backend only.
 */
export declare function createUploadPutUrl(
  _ctx: RichUgcCtx,
  options?: Pick<StorageUploadOptions, 'protected' | 'expiresInSeconds'>,
): Promise<string>
/**
 * Universal way to get a URL to upload a file to the file storage service.
 * In browser, it uses a getPutUrl provided by the system code in the browser environment
 *  or directly provided getPutUrl option to request a direct upload URL to the file storage service.
 * This function works both in browser and server code but is designed specifically for the browser side,
 *  because on the backend it's better to use createUploadPutUrl (which is actually done here).
 * The resulting URL should be used immediately to upload a file as it may have a short lifetime.
 */
export declare function obtainStorageFilePutUrl(
  ctx: RichUgcCtx,
  options?: Pick<StorageUploadOptions, 'protected' | 'expiresInSeconds'> & {
    /** use this getPutUrl instead of provided by the system environment (client only) */
    getPutUrl?: string
    /** fallback to this URL if no getPutUrl is provided (client only) */
    filePutUrl?: string
  },
): Promise<string>
/**
 * Returns an authorization URL to upload a file from the given URL.
 * The resulting URL redirects the authorized user to a direct short-living URL to the file storage service.
 * Works also in browser in the properly configured environment.
 */
export declare function getFetchAuthUrl(
  ctx: RichUgcCtx,
  fetchUrl: string,
  options?: Pick<StorageFetchOptions, 'protected' | 'headers'>,
): string
/**
 * Returns a direct URL to the file storage service to upload a file from the given URL.
 * By default, the URL is valid for 10 minutes, but it can be adjusted via the expiresInSeconds option.
 * Backend only.
 */
export declare function createFetchUrl(
  _ctx: RichUgcCtx,
  fetchUrl: string,
  options?: Pick<StorageFetchOptions, 'protected' | 'expiresInSeconds' | 'headers'>,
): Promise<string>
/**
 * Fetches the file from the given URL into the file storage service.
 * Returns a hash of the resulting file in the file storage.
 */
export declare function fetchUrlToStorage(
  ctx: RichUgcCtx,
  fetchUrl: string,
  options?: Pick<StorageFetchOptions, 'protected' | 'headers'>,
): Promise<string>
/**
 * Returns a direct URL to the file storage service that creates an empty partially uploaded file,
 *  that can be appended with later requests to createPartialAppendUrl and finalized with createPartialPublishUrl.
 * @see createPartialAppendUrl
 * @see createPartialPublishUrl
 */
export declare function createPartialUploadUrl(
  _ctx: RichUgcCtx,
  fileName: string,
  options?: Pick<StorageUploadOptions, 'protected' | 'expiresInSeconds'>,
): Promise<string>
/**
 * Returns a direct URL to the file storage service to append data to the partially uploaded file.
 * @see createPartialUploadUrl
 */
export declare function createPartialAppendUrl(
  _ctx: RichUgcCtx,
  partialUploadHash: string,
  options?: Pick<StorageUploadOptions, 'expiresInSeconds'>,
): Promise<string>
/**
 * Returns a direct URL to the file storage service to finalize the partially uploaded file.
 * @see createPartialUploadUrl
 */
export declare function createPartialPublishUrl(
  _ctx: RichUgcCtx,
  partialUploadHash: string,
  options?: Pick<StorageUploadOptions, 'expiresInSeconds'>,
): Promise<string>
/**
 * Creates an empty partially uploaded file in the file storage service
 * @returns a temporary hash of the partially uploaded file, that can be used to append data to it and finalize it.
 * @see createPartialAppendUrl
 * @see appendToPartialStorageFile
 * @see finalizePartialStorageFileUpload
 */
export declare function startPartialStorageFileUpload(
  ctx: RichUgcCtx,
  fileName: string,
  options?: Pick<StorageUploadOptions, 'protected'>,
): Promise<string>
/**
 * Appends a data chunk to the partially uploaded file in the file storage service.
 * @see startPartialStorageFileUpload
 * @see finalizePartialStorageFileUpload
 * @see createPartialAppendUrl
 */
export declare function appendToPartialStorageFile(
  ctx: RichUgcCtx,
  partialUploadHash: string,
  dataChunk: string,
): Promise<void>
/**
 * Finalizes a partial upload process in the file storage service.
 * @returns the final permanent hash of the uploaded file.
 * @see startPartialStorageFileUpload
 * @see appendToPartialStorageFile
 * @see createPartialPublishUrl
 */
export declare function finalizePartialStorageFileUpload(ctx: RichUgcCtx, partialUploadHash: string): Promise<string>
export declare function getVideoInfo(one: RichUgcCtx, two: string): Promise<VideoInfo>
export declare function getAudioInfo(ctx: RichUgcCtx, hash: string): Promise<AudioInfo>
/**
 * Returns a thumbnail image URL with passed dimensions for supported file types.
 */
export declare function getThumbnailUrl(ctx: RichUgcCtx, hash: string, width?: number, height?: number): string
export interface StorageProtectedSharingOptions {
  width?: number
  height?: number
  /** defaults to 2 minutes */
  expiresInSeconds?: number
  /** Don't throw an error if a public file hash is given, return its public URL instead, default is false */
  allowNonProtected?: boolean
}
export declare function createSharedThumbnailUrl(
  ctx: RichUgcCtx,
  hash: string,
  options?: StorageProtectedSharingOptions,
): Promise<string>
/**
 * Returns URL of the file's original version with special headers, that instructs browser to save the file
 *  to the disk with its original name saved to the file storage service.
 */
export declare function getDownloadUrl(ctx: RichUgcCtx, hash: string): string
export declare function createSharedDownloadUrl(
  ctx: RichUgcCtx,
  hash: string,
  options?: Omit<StorageProtectedSharingOptions, 'width' | 'height'>,
): Promise<string>
/**
 * Returns URL of the file's original version, without any additional headers.
 * A browser will show the file right in place if it supports its type (images, PDFs, etc.)
 */
export declare function getOriginalUrl(ctx: RichUgcCtx, hash: string): string
export declare function createSharedOriginalUrl(
  ctx: RichUgcCtx,
  hash: string,
  options?: Omit<StorageProtectedSharingOptions, 'width' | 'height'>,
): Promise<string>
/**
 * Returns a direct URL to the file storage service that allows to upload existing file(s) with given hash(es)
 *  to the given URL FROM the file storage.
 */
export declare function createForwardInitUrl(
  _ctx: RichUgcCtx,
  hashes: string | string[],
  forwardUrl: string,
  options?: Pick<StorageProtectedSharingOptions, 'expiresInSeconds'>,
): Promise<string>
/**
 * Returns a direct URL to the file storage service that allows to request current status of the forward operation
 *  by the given request ID.
 */
export declare function createForwardStatusUrl(_ctx: RichUgcCtx, forwardRequestId: string): Promise<string>
declare type UploadStorageFilesToUrlParams = {
  uploadToUrl: string
  headers?: Record<string, string | undefined>
  additionalFormFields?: JSONInputObject
} & (
  | {
      files: Record<string, string>
    }
  | {
      fileName: string
      fileHash: string
    }
)
/**
 * Initiates uploading of one or multiple files from the file storage service
 *  to the given URL using POST in multipart/form-data format.
 * @returns requestId of the initiated upload operation, which can be used to check the status of the operation.
 * @see createForwardStatusUrl
 * @see createForwardInitUrl
 */
export declare function forwardStorageFilesToUrl(
  ctx: RichUgcCtx,
  params: UploadStorageFilesToUrlParams,
): Promise<string>
declare type StorageForwardStatus<T = unknown> =
  | {
      status: 'forwarding'
    }
  | {
      status: 'success' | 'failure'
      responseCode: number
      responseBody: T
      responseHeaders: Record<string, string>
    }
  | {
      status: 'error'
      reason: string
    }
/**
 * Requests and returns the current status of the forward operation by the given request ID from the file storage service.
 */
export declare function checkForwardStatus<T = unknown>(
  ctx: RichUgcCtx,
  forwardRequestId: string,
): Promise<StorageForwardStatus<T>>
/**
 * Returns an object with URL and sizes of the image by its hash, useful for app/ui <image src=...>.
 */
export declare function getImageSrcFromHash(
  one: RichUgcCtx,
  two: string,
  three?: number,
  four?: number,
): ImageProps['src']

export {}
