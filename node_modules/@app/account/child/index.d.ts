import { HeapId } from 'core/heap/heapTypes'
import { QueryParamsOption } from 'lib/chatium-json'
import { RichUgcAccount } from 'services/ugc-runner/runtime/context/RichUgcCtxAccount'
import { UgcAccount, UgcCreateAccountOptions } from 'services/ugc-runner/runtime/runtimeTypes'
import { AnyObject } from 'utils/types'

declare type Lang = string
declare type AccountUrlFn = {
  accountUrlParams: AccountUrlParams
  (path: string, options?: QueryParamsOption): string
}
interface AccountUrlParams {
  accountName: string
  accountHost: string
  accountPathPrefix: string
  pluginAppInfo?: UgcPluginAppUrlInfo
}
declare type HashMediaType = 'file' | 'video' | 'image' | 'audio'
interface StorageUploadOptions {
  /** upload a non-public file */
  protected?: boolean
  /** allow only these media types (supported: image | video | audio) */
  mediaType?: HashMediaType | HashMediaType[]
  /** allow only these content type pattern(s) */
  contentType?: string | string[]
  /** allow only these file extensions */
  extension?: string | string[]
  /** minimum file size in bytes */
  minBytes?: number
  /** maximum file size in bytes */
  maxBytes?: number
  /** custom auth session authorizing URL expiration time in seconds, default is a week */
  expiresInSeconds?: number
}
declare type AccountRole = typeof validAccountRoles[number]
declare const validAccountRoles: readonly ['None', 'Staff', 'Admin', 'Developer', 'Owner']
declare type AccountAuthType = 'Email' | 'Phone' | 'Multi'
interface UgcPluginAppUrlInfo {
  appSlug: string
  /** path to the application root directory */
  directoryPath: string
}
interface UgcCtxAccount {
  id: number
  name: string
  host: string
  authType: AccountAuthType
  /** @deprecated use host instead */
  externalHost: string | null
  publishedVersion: string | null
  metaHash: string
  pathPrefix: string
}
interface ClientInfo {
  ip: string
  deviceName: string
  osName: string
}
declare type LogLevel = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace' | 'unknown'
declare type UgcKvOpts = {
  [key: string]: string | number | undefined
}
declare type LogParams = {
  err?: Error
  kv?: UgcKvOpts
  json?: unknown
  level?: LogLevel
  msg?: string | number
}
declare type LogParamsNoMsg = Omit<LogParams, 'msg'>
export interface UgcAccountFull extends RichUgcAccount, Pick<UgcAccount, 'title' | 'image' | 'lang' | 'createdAt'> {}
export declare function getAccountById(ctx: RichUgcCtx, id: number): Promise<UgcAccountFull>
export declare function findAccountsByIds(ctx: RichUgcCtx, ids: number[]): Promise<UgcAccountFull[]>
export declare function getOwnedAccountsForUser(ctx: RichUgcCtx, userId?: HeapId): Promise<UgcAccountFull[]>
export declare function isAccountNameAvailable(_ctx: RichUgcCtx, name: string): Promise<boolean>
export declare function registerNewAccount(
  ctx: RichUgcCtx,
  name: string,
  options?: UgcCreateAccountOptions,
): Promise<RichUgcAccount>
/**
 * Installs the given application to the given child account
 */
export declare function installAppToChildAccount(
  _ctx: RichUgcCtx,
  targetChildAccountOrId: number | UgcAccount | RichUgcAccount,
  appSlug: string,
  options?: InstallAppOptions,
): Promise<void>
export interface InstallAppOptions {
  customParams?: AnyObject
}
export declare function updateChildAccountStartApp(
  _ctx: RichUgcCtx,
  targetChildAccountOrId: number | UgcAccount | RichUgcAccount,
  startAppSlug: string | null,
): Promise<void>
export declare function addUserToChildAccountOwners(
  _ctx: RichUgcCtx,
  targetChildAccountOrId: number | UgcAccount | RichUgcAccount,
  userId: HeapId,
): Promise<void>
export declare function removeUserFromChildAccountOwners(
  _ctx: RichUgcCtx,
  targetChildAccountOrId: number | UgcAccount | RichUgcAccount,
  userId: HeapId,
  newChildAccountRole?: AccountRole,
): Promise<void>
export declare function authenticateUserInChildAccount(
  ctx: RichUgcCtx,
  parentAccountUserId: string,
  childAccount: UgcCtxAccount | RichUgcAccount,
  gotoPathOrUrl?: string,
  /**
   * Info about the auth session from which the new child account session is created
   * By default, current ctx info is used, but it can be overridden if the request is originated from another place.
   */
  sourceSessionInfo?: {
    /** Auth session ID in the parent account, from which the new child account auth session is created */
    authSessionId?: string
    /** User-agent info for the created auth session in the child account */
    clientInfo?: ClientInfo
  },
): Promise<string>

export {}
