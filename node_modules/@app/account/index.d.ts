import {
  UgcAccount,
  UgcAccountSeat as UgcAccountSeat_,
  UgcUpdateAccountSettings,
} from 'services/ugc-runner/runtime/runtimeTypes'

declare type Lang = string
declare type AccountAuthType = 'Email' | 'Phone' | 'Multi'
interface UgcCtxAccount {
  id: number
  name: string
  host: string
  authType: AccountAuthType
  /** @deprecated use host instead */
  externalHost: string | null
  publishedVersion: string | null
  metaHash: string
  pathPrefix: string
}
declare enum BalanceType {
  Token = 'Token',
  TokenBurnable = 'TokenBurnable',
}
declare enum BalanceCreditMethod {
  Set = 'Set',
  Add = 'Add',
}
declare enum BalanceTransactionType {
  Debit = 'Debit',
  Credit = 'Credit',
}
interface CurrentAccountBalanceTokenResult {
  total: string
  burnable: string
  regular: string
  burnable_expire_at: Date | null
}
interface AccountBalanceTransaction {
  id: string
  account_id: number
  type: BalanceTransactionType
  balance_type: BalanceType
  app_id: number
  created_at: Date
  balance_change: string
  requested_balance_change: string
  expire_at: Date | null
  credit_method: BalanceCreditMethod | null
  message: string
  data: any
  unique_external_id: string | null
}
interface AccountBalanceTransactionRich extends AccountBalanceTransaction {
  app_slug: string | null
}
export declare function getCurrentAccountSettings(_ctx: RichUgcCtx): Promise<UgcAccount>
export declare function updateCurrentAccountSettings(
  _ctx: RichUgcCtx,
  settings: UgcUpdateAccountSettings,
): Promise<void>
/**
 * Installs the given application to the current account.
 * Can be called only from the application with the appropriate permissions.
 * Doesn't work for the account code itself.
 */
export declare function installApp(ctx: RichUgcCtx, appSlug: string): Promise<void>
/**
 * Uninstalls the given application from the current account.
 * Can be called only from the application with the appropriate permissions.
 * Doesn't work for the account code itself.
 */
export declare function uninstallApp(ctx: RichUgcCtx, appSlug: string): Promise<void>
export declare type UgcAccountSeat = UgcAccountSeat_
export declare function listAccountSeats(ctx: RichUgcCtx): Promise<UgcAccountSeat[]>
export declare function createAccountSeat(ctx: RichUgcCtx, userId: string): Promise<void>
export declare function dropAccountSeat(ctx: RichUgcCtx, userId: string): Promise<void>
export declare type GetBalanceResult = CurrentAccountBalanceTokenResult
export declare function getBalance(_ctx: RichUgcCtx): Promise<GetBalanceResult>
export declare function debitBalanceToken(
  _ctx: RichUgcCtx,
  amount: string | number,
  message: string,
  data: any,
  options?: {
    uniqueExternalId?: string | null
  },
): Promise<GetBalanceResult>
export declare function creditBalanceTokenRegular(
  _ctx: RichUgcCtx,
  amount: string | number,
  message: string,
  data: any,
  options?: {
    uniqueExternalId?: string | null
  },
): Promise<GetBalanceResult>
export declare function creditBalanceTokenBurnable(
  _ctx: RichUgcCtx,
  amount: string | number,
  method: 'add' | 'set',
  expireAt: Date,
  message: string,
  data: any,
  options?: {
    uniqueExternalId?: string | null
  },
): Promise<GetBalanceResult>
export declare function findBalanceTransactions(_ctx: RichUgcCtx): Promise<Array<AccountBalanceTransactionRich>>

export {}
