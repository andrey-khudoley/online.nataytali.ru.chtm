import { Filter, OrderByDefinition, SortDirection } from 'core/db/dbQueryTypes'
import { HeapObjectType } from 'core/heap/heapTypes'
import {
  FindAsapJobsOptions,
  FindScheduledJobsOptions,
  UgcAsapJob,
  UgcScheduledJob,
} from 'services/ugc-runner/runtime/runtimeTypes'
import { JSONInputValue } from 'utils/types'

interface CqlSelectQuery {
  from: CqlFrom
  select: CqlSelect
  distinct?: boolean
  where?: CqlWhere
  having?: CqlHaving
  order?: CqlOrder
  group?: CqlGroup
  limit?: number
  offset?: number
}
declare type CqlFrom = CqlTable | CqlSubQuery
declare type CqlTable = {
  kind: 'table'
  schema: string
  name: string
}
declare type CqlSubQuery = {
  kind: 'sub'
  query: CqlSelectQuery
}
declare type CqlSelect = Record<string, CqlExpr> | undefined
declare type CqlExpr = CqlPlainColumn | CqlExprFn | CqlDynParam | CqlJsonPath | CqlAsterisk
declare type CqlPlainColumn = {
  kind: 'col'
  name: string
  type?: CqlFieldType
}
declare type CqlExprFn = {
  kind: 'fn'
  fn: string
  args: CqlExpr[]
  distinct?: boolean
  type?: CqlFieldType
}
declare type CqlDynParam = {
  kind: 'dyn'
  value: unknown
  type?: CqlFieldType
}
declare type CqlJsonPath = {
  kind: 'json'
  path: CqlDeepPath
  type: CqlFieldType
}
declare type CqlAsterisk = {
  kind: '*'
  type?: undefined
}
declare type CqlFieldType = 'string' | 'number' | 'boolean' | 'date' | 'json'
declare type CqlDeepPath = [string, ...(string | number)[]]
declare type CqlGroup = CqlSelectAlias[]
declare type CqlSelectAlias = string
declare type CqlWhere = Filter<any>
declare type CqlHaving = Filter<any>
declare type CqlOrder = OrderByDefinition<any>
declare type TimeUnit =
  | 'milliseconds'
  | 'seconds'
  | 'minutes'
  | 'hours'
  | 'days'
  | 'weeks'
  | 'months'
  | 'quarters'
  | 'years'
interface UgcJobScheduleParams {
  allowRetry?: boolean
}
interface HqlSelectQuery {
  from: HqlFrom
  select: HqlSelect
  distinct?: boolean
  where?: CqlWhere
  group?: CqlSelectAlias[]
  having?: CqlHaving
  order?: HqlOrder
  limit?: number
  offset?: number
  resPlainJson?: boolean
  resTakeFirst?: boolean
}
declare type HqlFrom = HqlTable | HqlSubQuery
declare type HqlTable = {
  kind: 'table'
  heapType: HeapObjectType
}
declare type HqlSubQuery = {
  kind: 'sub'
  query: HqlSelectQuery
}
declare type HqlExpr = HqlField | HqlExprFn | HqlExprAgg | CqlDynParam
declare type HqlField = HqlTableField | HqlSubQueryField
declare type HqlTableField = HqlSystemColumn | HqlDataField
declare type HqlSubQueryField = HqlSubPlainField | HqlSubJsonField
declare type HqlSystemColumn = {
  kind: 'sys'
  name: HqlSystemColumnName
}
declare type HqlSystemColumnName = typeof allowedHqlSystemColumns[number]
declare const allowedHqlSystemColumns: readonly ['id', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy']
declare type HqlDataField = {
  kind: 'data'
  path: string | CqlDeepPath
  type: CqlFieldType
}
declare type HqlSubPlainField = {
  kind: 'subPlain'
  name: string
}
declare type HqlSubJsonField = {
  kind: 'subJson'
  path: CqlDeepPath
  type: CqlFieldType
}
declare type HqlExprFn = {
  kind: 'fn'
  fn: string
  args: Array<HqlExpr>
}
declare type HqlExprAgg = {
  kind: 'agg'
  fn: string
  args: [CqlAsterisk] | Array<CqlDynParam | HqlField | HqlExprFnNoAgg>
  distinct?: boolean
}
declare type HqlExprFnNoAgg = {
  kind: 'fn'
  fn: string
  args: Array<HqlField | HqlExprFnNoAgg | CqlDynParam>
}
declare type HqlSelect = Record<string, HqlExpr>
declare type HqlOrder = HqlSimpleOrderBy | Array<HqlSingleOrderBy>
declare type HqlSingleOrderBy = HqlSimpleOrderBy | [HqlSimpleOrderBy, SortDirection]
declare type HqlSimpleOrderBy =
  | HqlSystemColumnName
  | string
  | HqlDataField
  | HqlSubJsonField
  | HqlOrderAliasField
  | HqlExprFn
declare type HqlOrderAliasField = {
  kind: 'aliasJson'
  path: CqlDeepPath
  type: CqlFieldType
}
/**
 * @deprecated use `routeRef.scheduleJobAt`
 */
export declare function scheduleJobAt(
  ctx: RichUgcCtx,
  startAt: Date,
  url: string,
  params?: JSONInputValue,
  scheduleParams?: UgcJobScheduleParams,
): Promise<string>
/**
 * @deprecated use `routeRef.scheduleJobAfter`
 */
export declare function scheduleJobAfter(
  ctx: RichUgcCtx,
  amount: number,
  unit: TimeUnit,
  url: string,
  params?: JSONInputValue,
  scheduleParams?: UgcJobScheduleParams,
): Promise<string>
/**
 * @deprecated use `routeRef.scheduleJobAsap`
 */
export declare function scheduleJobAsap(
  ctx: RichUgcCtx,
  url: string,
  params?: JSONInputValue,
  scheduleParams?: UgcJobScheduleParams,
): Promise<string>
export declare function reScheduleFailedAsapJob(_ctx: RichUgcCtx, jobId: number | string): Promise<void>
/**
 * @deprecated Use `cancelScheduledJob` or `cancelAsapJob`
 */
export declare function cancelJob(_ctx: RichUgcCtx, jobId: string): Promise<boolean>
export declare function cancelAsapJob(_ctx: RichUgcCtx, jobId: number): Promise<boolean>
export declare function cancelScheduledJob(_ctx: RichUgcCtx, jobId: number): Promise<boolean>
export declare function findAsapJobById(_ctx: RichUgcCtx, jobId: number): Promise<UgcAsapJob | null>
export declare function findScheduledJobById(_ctx: RichUgcCtx, jobId: number): Promise<UgcScheduledJob | null>
export declare function findAsapJobs(ctx: RichUgcCtx, options?: FindAsapJobsOptions): Promise<UgcAsapJob[]>
export declare function findScheduledJobs(
  ctx: RichUgcCtx,
  options?: FindScheduledJobsOptions,
): Promise<UgcScheduledJob[]>

export {}
