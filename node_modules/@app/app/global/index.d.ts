import * as tb from '@sinclair/typebox'
import { Filter, OrderByDefinition, SortDirection } from 'core/db/dbQueryTypes'
import { HeapObjectType } from 'core/heap/heapTypes'
import {
  AppPermissionRequirementsSchema,
  FindAppsOptions,
  UgcApp,
  UgcAppPatch,
} from 'services/ugc-runner/runtime/runtimeTypes'

interface CqlSelectQuery {
  from: CqlFrom
  select: CqlSelect
  distinct?: boolean
  where?: CqlWhere
  having?: CqlHaving
  order?: CqlOrder
  group?: CqlGroup
  limit?: number
  offset?: number
}
declare type CqlFrom = CqlTable | CqlSubQuery
declare type CqlTable = {
  kind: 'table'
  schema: string
  name: string
}
declare type CqlSubQuery = {
  kind: 'sub'
  query: CqlSelectQuery
}
declare type CqlSelect = Record<string, CqlExpr> | undefined
declare type CqlExpr = CqlPlainColumn | CqlExprFn | CqlDynParam | CqlJsonPath | CqlAsterisk
declare type CqlPlainColumn = {
  kind: 'col'
  name: string
  type?: CqlFieldType
}
declare type CqlExprFn = {
  kind: 'fn'
  fn: string
  args: CqlExpr[]
  distinct?: boolean
  type?: CqlFieldType
}
declare type CqlDynParam = {
  kind: 'dyn'
  value: unknown
  type?: CqlFieldType
}
declare type CqlJsonPath = {
  kind: 'json'
  path: CqlDeepPath
  type: CqlFieldType
}
declare type CqlAsterisk = {
  kind: '*'
  type?: undefined
}
declare type CqlFieldType = 'string' | 'number' | 'boolean' | 'date' | 'json'
declare type CqlDeepPath = [string, ...(string | number)[]]
declare type CqlGroup = CqlSelectAlias[]
declare type CqlSelectAlias = string
declare type CqlWhere = Filter<any>
declare type CqlHaving = Filter<any>
declare type CqlOrder = OrderByDefinition<any>
declare type AppPermissionRequirements = tb.Static<typeof appPermissionRequirementsSchema>
declare const appPermissionRequirementsSchema: tb.TObject<{
  accountApps: tb.TOptional<
    tb.TUnion<
      [
        ...(
          | tb.TLiteral<'read'>
          | tb.TLiteral<'read-optional'>
          | tb.TLiteral<'write'>
          | tb.TLiteral<'write-or-read'>
          | tb.TLiteral<'write-optional'>
        )[],
        tb.TObject<
          {
            install: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
            uninstall: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
          } & {
            all: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          }
        >,
      ]
    >
  >
  globalApps: tb.TOptional<
    tb.TUnion<
      [
        ...(
          | tb.TLiteral<'read'>
          | tb.TLiteral<'read-optional'>
          | tb.TLiteral<'write'>
          | tb.TLiteral<'write-or-read'>
          | tb.TLiteral<'write-optional'>
        )[],
        tb.TObject<
          {
            syncPermissions: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
          } & {
            all: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          }
        >,
      ]
    >
  >
  accountDomains: tb.TOptional<
    tb.TUnion<
      (
        | tb.TLiteral<'read'>
        | tb.TLiteral<'read-optional'>
        | tb.TLiteral<'write'>
        | tb.TLiteral<'write-or-read'>
        | tb.TLiteral<'write-optional'>
      )[]
    >
  >
  accountHeap: tb.TOptional<
    tb.TUnion<
      [
        ...(
          | tb.TLiteral<'read'>
          | tb.TLiteral<'read-optional'>
          | tb.TLiteral<'write'>
          | tb.TLiteral<'write-or-read'>
          | tb.TLiteral<'write-optional'>
        )[],
        tb.TObject<
          {
            tablesList: tb.TOptional<tb.TUnion<(tb.TLiteral<'read'> | tb.TLiteral<'read-optional'>)[]>>
            tableByName: tb.TOptional<tb.TUnion<(tb.TLiteral<'read'> | tb.TLiteral<'read-optional'>)[]>>
            tableRows: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
            tableFile: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
          } & {
            all: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          }
        >,
      ]
    >
  >
  accountJobs: tb.TOptional<
    tb.TUnion<
      [
        ...(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[],
        tb.TObject<
          {
            asap: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
            scheduled: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
          } & {
            all: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
          }
        >,
      ]
    >
  >
  accountSettings: tb.TOptional<
    tb.TUnion<
      [
        ...(
          | tb.TLiteral<'read'>
          | tb.TLiteral<'read-optional'>
          | tb.TLiteral<'write'>
          | tb.TLiteral<'write-or-read'>
          | tb.TLiteral<'write-optional'>
        )[],
        tb.TObject<
          {
            title: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
            image: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
            lang: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
            createdAt: tb.TOptional<tb.TUnion<(tb.TLiteral<'read'> | tb.TLiteral<'read-optional'>)[]>>
          } & {
            all: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          }
        >,
      ]
    >
  >
  authenticate: tb.TOptional<
    tb.TUnion<
      [
        ...(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[],
        tb.TObject<
          {
            Phone: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
            Email: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
            TelegramId: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
            bySystemProvider: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
          } & {
            all: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
          }
        >,
      ]
    >
  >
  childAccounts: tb.TOptional<
    tb.TUnion<
      [
        ...(
          | tb.TLiteral<'read'>
          | tb.TLiteral<'read-optional'>
          | tb.TLiteral<'write'>
          | tb.TLiteral<'write-or-read'>
          | tb.TLiteral<'write-optional'>
        )[],
        tb.TObject<
          {
            accounts: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
            apps: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
            domains: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
            owners: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          } & {
            all: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          }
        >,
      ]
    >
  >
  feed: tb.TOptional<
    tb.TUnion<
      (
        | tb.TLiteral<'read'>
        | tb.TLiteral<'read-optional'>
        | tb.TLiteral<'write'>
        | tb.TLiteral<'write-or-read'>
        | tb.TLiteral<'write-optional'>
      )[]
    >
  >
  hook: tb.TOptional<
    tb.TUnion<
      [
        ...(tb.TLiteral<'read'> | tb.TLiteral<'read-optional'>)[],
        tb.TObject<
          {
            handlerInfo: tb.TOptional<tb.TUnion<(tb.TLiteral<'read'> | tb.TLiteral<'read-optional'>)[]>>
          } & {
            all: tb.TOptional<tb.TUnion<(tb.TLiteral<'read'> | tb.TLiteral<'read-optional'>)[]>>
          }
        >,
      ]
    >
  >
  i18n: tb.TOptional<
    tb.TUnion<
      [
        ...(tb.TLiteral<'read'> | tb.TLiteral<'read-optional'>)[],
        tb.TObject<
          {
            getSupportedTranslationLangs: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'read'> | tb.TLiteral<'read-optional'>)[]>
            >
          } & {
            all: tb.TOptional<tb.TUnion<(tb.TLiteral<'read'> | tb.TLiteral<'read-optional'>)[]>>
          }
        >,
      ]
    >
  >
  user: tb.TOptional<
    tb.TUnion<
      [
        ...(
          | tb.TLiteral<'read'>
          | tb.TLiteral<'read-optional'>
          | tb.TLiteral<'write'>
          | tb.TLiteral<'write-or-read'>
          | tb.TLiteral<'write-optional'>
        )[],
        tb.TObject<
          {
            createBotUser: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
            accountRole: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
            username: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
            lang: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
            identities: tb.TOptional<
              tb.TUnion<
                [
                  ...(
                    | tb.TLiteral<'read'>
                    | tb.TLiteral<'read-optional'>
                    | tb.TLiteral<'write'>
                    | tb.TLiteral<'write-or-read'>
                    | tb.TLiteral<'write-optional'>
                  )[],
                  tb.TObject<
                    {
                      Phone: tb.TOptional<
                        tb.TUnion<
                          (
                            | tb.TLiteral<'read'>
                            | tb.TLiteral<'read-optional'>
                            | tb.TLiteral<'write'>
                            | tb.TLiteral<'write-or-read'>
                            | tb.TLiteral<'write-optional'>
                          )[]
                        >
                      >
                      Email: tb.TOptional<
                        tb.TUnion<
                          (
                            | tb.TLiteral<'read'>
                            | tb.TLiteral<'read-optional'>
                            | tb.TLiteral<'write'>
                            | tb.TLiteral<'write-or-read'>
                            | tb.TLiteral<'write-optional'>
                          )[]
                        >
                      >
                      TelegramId: tb.TOptional<
                        tb.TUnion<
                          (
                            | tb.TLiteral<'read'>
                            | tb.TLiteral<'read-optional'>
                            | tb.TLiteral<'write'>
                            | tb.TLiteral<'write-or-read'>
                            | tb.TLiteral<'write-optional'>
                          )[]
                        >
                      >
                    } & {
                      all: tb.TOptional<
                        tb.TUnion<
                          (
                            | tb.TLiteral<'read'>
                            | tb.TLiteral<'read-optional'>
                            | tb.TLiteral<'write'>
                            | tb.TLiteral<'write-or-read'>
                            | tb.TLiteral<'write-optional'>
                          )[]
                        >
                      >
                    }
                  >,
                ]
              >
            >
            name: tb.TOptional<
              tb.TUnion<
                [
                  ...(
                    | tb.TLiteral<'read'>
                    | tb.TLiteral<'read-optional'>
                    | tb.TLiteral<'write'>
                    | tb.TLiteral<'write-or-read'>
                    | tb.TLiteral<'write-optional'>
                  )[],
                  tb.TObject<
                    {
                      firstName: tb.TOptional<
                        tb.TUnion<
                          (
                            | tb.TLiteral<'read'>
                            | tb.TLiteral<'read-optional'>
                            | tb.TLiteral<'write'>
                            | tb.TLiteral<'write-or-read'>
                            | tb.TLiteral<'write-optional'>
                          )[]
                        >
                      >
                      middleName: tb.TOptional<
                        tb.TUnion<
                          (
                            | tb.TLiteral<'read'>
                            | tb.TLiteral<'read-optional'>
                            | tb.TLiteral<'write'>
                            | tb.TLiteral<'write-or-read'>
                            | tb.TLiteral<'write-optional'>
                          )[]
                        >
                      >
                      lastName: tb.TOptional<
                        tb.TUnion<
                          (
                            | tb.TLiteral<'read'>
                            | tb.TLiteral<'read-optional'>
                            | tb.TLiteral<'write'>
                            | tb.TLiteral<'write-or-read'>
                            | tb.TLiteral<'write-optional'>
                          )[]
                        >
                      >
                    } & {
                      all: tb.TOptional<
                        tb.TUnion<
                          (
                            | tb.TLiteral<'read'>
                            | tb.TLiteral<'read-optional'>
                            | tb.TLiteral<'write'>
                            | tb.TLiteral<'write-or-read'>
                            | tb.TLiteral<'write-optional'>
                          )[]
                        >
                      >
                    }
                  >,
                ]
              >
            >
            gender: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
            birthday: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
            image: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          } & {
            all: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          }
        >,
      ]
    >
  >
  metric: tb.TOptional<
    tb.TUnion<
      [
        ...(
          | tb.TLiteral<'read'>
          | tb.TLiteral<'read-optional'>
          | tb.TLiteral<'write'>
          | tb.TLiteral<'write-or-read'>
          | tb.TLiteral<'write-optional'>
        )[],
        tb.TObject<
          {
            event: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
            eventSubscription: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          } & {
            all: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          }
        >,
      ]
    >
  >
  storage: tb.TOptional<
    tb.TObject<{
      fullAccountAccess: tb.TOptional<tb.TUnion<(tb.TLiteral<'read'> | tb.TLiteral<'read-optional'>)[]>>
      upload: tb.TOptional<
        tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
      >
    }>
  >
  system: tb.TOptional<
    tb.TUnion<
      [
        ...(
          | tb.TLiteral<'read'>
          | tb.TLiteral<'read-optional'>
          | tb.TLiteral<'write'>
          | tb.TLiteral<'write-or-read'>
          | tb.TLiteral<'write-optional'>
        )[],
        tb.TObject<
          {
            sendEmail: tb.TOptional<
              tb.TUnion<(tb.TLiteral<'write'> | tb.TLiteral<'write-or-read'> | tb.TLiteral<'write-optional'>)[]>
            >
          } & {
            all: tb.TOptional<
              tb.TUnion<
                (
                  | tb.TLiteral<'read'>
                  | tb.TLiteral<'read-optional'>
                  | tb.TLiteral<'write'>
                  | tb.TLiteral<'write-or-read'>
                  | tb.TLiteral<'write-optional'>
                )[]
              >
            >
          }
        >,
      ]
    >
  >
}>
interface HqlSelectQuery {
  from: HqlFrom
  select: HqlSelect
  distinct?: boolean
  where?: CqlWhere
  group?: CqlSelectAlias[]
  having?: CqlHaving
  order?: HqlOrder
  limit?: number
  offset?: number
  resPlainJson?: boolean
  resTakeFirst?: boolean
}
declare type HqlFrom = HqlTable | HqlSubQuery
declare type HqlTable = {
  kind: 'table'
  heapType: HeapObjectType
}
declare type HqlSubQuery = {
  kind: 'sub'
  query: HqlSelectQuery
}
declare type HqlExpr = HqlField | HqlExprFn | HqlExprAgg | CqlDynParam
declare type HqlField = HqlTableField | HqlSubQueryField
declare type HqlTableField = HqlSystemColumn | HqlDataField
declare type HqlSubQueryField = HqlSubPlainField | HqlSubJsonField
declare type HqlSystemColumn = {
  kind: 'sys'
  name: HqlSystemColumnName
}
declare type HqlSystemColumnName = typeof allowedHqlSystemColumns[number]
declare const allowedHqlSystemColumns: readonly ['id', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy']
declare type HqlDataField = {
  kind: 'data'
  path: string | CqlDeepPath
  type: CqlFieldType
}
declare type HqlSubPlainField = {
  kind: 'subPlain'
  name: string
}
declare type HqlSubJsonField = {
  kind: 'subJson'
  path: CqlDeepPath
  type: CqlFieldType
}
declare type HqlExprFn = {
  kind: 'fn'
  fn: string
  args: Array<HqlExpr>
}
declare type HqlExprAgg = {
  kind: 'agg'
  fn: string
  args: [CqlAsterisk] | Array<CqlDynParam | HqlField | HqlExprFnNoAgg>
  distinct?: boolean
}
declare type HqlExprFnNoAgg = {
  kind: 'fn'
  fn: string
  args: Array<HqlField | HqlExprFnNoAgg | CqlDynParam>
}
declare type HqlSelect = Record<string, HqlExpr>
declare type HqlOrder = HqlSimpleOrderBy | Array<HqlSingleOrderBy>
declare type HqlSingleOrderBy = HqlSimpleOrderBy | [HqlSimpleOrderBy, SortDirection]
declare type HqlSimpleOrderBy =
  | HqlSystemColumnName
  | string
  | HqlDataField
  | HqlSubJsonField
  | HqlOrderAliasField
  | HqlExprFn
declare type HqlOrderAliasField = {
  kind: 'aliasJson'
  path: CqlDeepPath
  type: CqlFieldType
}
export declare function findApps(ctx: RichUgcCtx, options?: FindAppsOptions): Promise<UgcApp[]>
export declare function findAppById(ctx: RichUgcCtx, appId: number): Promise<UgcApp | null>
export declare function findAppBySlug(ctx: RichUgcCtx, slug: string): Promise<UgcApp | null>
export declare function updateApp(ctx: RichUgcCtx, patch: UgcAppPatch): Promise<UgcApp>
export declare function getAppPermissionRequirementsSchema(ctx: RichUgcCtx): Promise<AppPermissionRequirementsSchema>
export declare function syncAppPermissionRequirementsToCurrentInstallations(
  ctx: RichUgcCtx,
  appId: number,
): Promise<void>

export { UgcApp as App }

export {}
