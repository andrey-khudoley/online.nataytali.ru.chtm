import { Accessor } from '@app/solid-js';
import { FunctionRouteRef } from '@app/types';
export type NodeType = {
    key: string;
    title: string;
    sourceData: {
        type: 'event';
        eventUrl: string;
        reactionsConfigRoute: FunctionRouteRef<typeof GetReactionsConfigParamsSchema, typeof ReactionConfigSchema>;
        clientConfigRoute: FunctionRouteRef<typeof GetClientConfigParamsSchema, typeof NodeClientConfigSchema>;
        analyticsConfigRoute?: FunctionRouteRef<typeof GetAnalyticsConfigParamsSchema, typeof AnalyticsConfigSchema>;
        settingsComponent?: [
            {
                clientVersionUrl: string;
            },
            string
        ];
    } | {
        type: 'action';
        actionRoute: FunctionRouteRef<typeof RunNodeActionsParamsSchema, typeof NodeActionResultSchema>;
        reactionsConfigRoute?: FunctionRouteRef<typeof GetReactionsConfigParamsSchema, typeof ReactionConfigSchema>;
        clientConfigRoute?: FunctionRouteRef<typeof GetClientConfigParamsSchema, typeof NodeClientConfigSchema>;
        settingsComponent?: [
            {
                clientVersionUrl: string;
            },
            string
        ];
    };
    lordicon?: {
        name: string;
        colors?: string;
    };
    defaultSettings?: Record<string, any>;
    helpUrls?: {
        ru?: string;
        en?: string;
    };
};
declare const ValidationErrorSchema: import("core/heap/v2/heapSchemaTypes").HsAny<{
    success: import("core/heap/v2/heapSchemaTypes").HsLiteral<false>;
    code: import("core/heap/v2/heapSchemaTypes").HsString<string>;
    message: import("core/heap/v2/heapSchemaTypes").HsOptional<import("core/heap/v2/heapSchemaTypes").HsString<string>>;
    details: import("core/heap/v2/heapSchemaTypes").HsOptional<import("core/heap/v2/heapSchemaTypes").HsAny<any>>;
}>;
declare const HeapUnknown: import("core/heap/v2/heapSchemaTypes").HsUnknown;
export type GetExternalNodesHookResult = {
    categoryTitle: string;
    errorsCallbackRoute?: FunctionRouteRef<typeof ValidationErrorSchema, typeof HeapUnknown>;
    nodeTypes: NodeType[];
} | {
    categoryTitle: string;
    errorsCallbackRoute?: string;
    nodeTypes: NodeType[];
};
export type NodeInfo<Settings = any> = {
    id: string;
    scene: string;
    title: string;
    type: string;
    typeOptions: { settings: Settings; [key: string]: unknown };
    key?: string;
    analyticOptions: any;
};
declare const GetReactionsConfigParamsSchema: import("core/heap/v2/heapSchemaTypes").HsAny<GetReactionsConfigParams>;
export type GetReactionsConfigParams<Settings = any> = {
    event: MetricEventRecord;
    node: NodeInfo<Settings>;
};
declare const ReactionConfigSchema: import("core/heap/v2/heapSchemaTypes").HsAny<ReactionsConfig>;
export type ReactionsConfig = {
    isEventMatchesNode: boolean;
    agentsConfig?: NodeAgentsConfig;
    normalizedEventParams: {
        [key: string]: JSONValue | undefined;
        user?: {
            id: string;
            email?: string;
            [key: string]: JSONValue;
        };
        session?: {
            id: string;
            [key: string]: JSONValue;
        };
        deal?: {
            id: string;
            [key: string]: JSONValue;
        };
        chat?: {
            id: string;
            [key: string]: JSONValue;
        };
        params?: JSONValue;
    };
    agentTransformers?: AgentsTransformer[]
};
export type NodeAgentsConfig = {
    requiredTypes?: string[];
    agentDescrs: NodeAgentTypeDescr[];
};
export type AgentsTransformer = AddAgent | UpdateAgentProps | TerminateAgent | CodeTransformer | ReplaceAgent;
interface AddAgent {
  type: 'add-agent';
  agentDescr: NodeAgentTypeDescr;
}
interface TerminateAgent {
  type: 'terminate-agent';
  agentType?: string;
  terminateAll?: boolean;
}
interface UpdateAgentProps {
  type: 'update-agent-props';
  agentType: string;
  props: Record<string, AgentPropRighthand>;
  forceResultType?: 'string' | 'number' | 'boolean' | 'any';
}
type AgentPropRighthand = SimpleValueRighthand | ExprRighthand;
interface SimpleValueRighthand {
  type: 'simple';
  valueType: 'string' | 'number' | 'boolean' | 'null';
  value: string | number | boolean | null;
}
interface ExprRighthand {
  type: 'expr';
  expr: string;
}
interface ReplaceAgent {
  type: 'replace-agent';
  agentDescr: NodeAgentTypeDescr;
}
interface CodeTransformer {
  type: 'code';
  code: string;
}
/**
 * How to obtain agent key of the given type from the event.
 */
export type NodeAgentTypeDescr = {
    agentType: string;
    keyDescr: AgentDescrEventFieldName | AgentDescrExpr;
    /**
     * If the parentAgentType is defined, then when a new agent is created:
     *  - the agent with the parentAgentType will tried to be found between the agents of the current node visit
     *  - if found, it will be set as the parent of the new agent
     * Intentionally made this field required to be explicit about absent parent during configuration
     */
    parentAgentType: string | null;
    propsDescrs?: Record<string, AgentDescrEventFieldName | AgentDescrExpr>;
    displayNameDescr?: AgentDescrEventFieldName | AgentDescrExpr;
};
export type AgentDescrEventFieldName = {
    type: 'field';
    field: keyof MetricEventRecord;
};
export type AgentDescrExpr = {
    type: 'expr';
    expr: string;
};
type JSONValue = string | number | boolean | null | JSONValue[] | JSONObject | Date | undefined;
export type JSONObject = {
    [key: string]: JSONValue;
};
export type MetricEventRecord = {
    sign?: number;
    uid?: string;
    sid?: string;
    sid_duration?: number;
    inferred_uid?: boolean;
    inferred_sid?: boolean;
    gc_visit_id?: number;
    gc_visitor_id?: number;
    gc_session_id?: number;
    account_id: number;
    url: string;
    referer?: string;
    user_agent?: string;
    ip?: string;
    title?: string;
    screen_width?: number;
    screen_height?: number;
    screen_pixel_ratio?: number;
    location_country?: string;
    location_region?: string;
    location_time_zone?: string;
    location_city?: string;
    location_coordinates_latitude?: number;
    location_coordinates_longitude?: number;
    ua_client_type?: string;
    ua_client_name?: string;
    ua_client_version?: string;
    ua_device_type?: string;
    ua_device_brand?: string;
    ua_device_model?: string;
    ua_os_name?: string;
    ua_os_version?: string;
    ua_os_platform?: string;
    ua_bot_name?: string;
    ua_bot_category?: string;
    os_name?: string;
    device_name?: string;
    request_type: 'screen' | 'apiCall' | 'get' | 'post';
    auth_id?: number;
    auth_type?: string;
    auth_key?: string;
    auth_first_name?: string;
    auth_last_name?: string;
    auth_lang?: string;
    user_id?: string;
    user_type?: 'Anonymous' | 'Real' | 'Bot';
    user_roles?: string[];
    user_account_role?: string;
    user_status?: string;
    user_expires_at?: Date | null;
    user_first_name?: string;
    user_last_name?: string;
    user_icon_image?: string;
    user_phone?: string;
    user_email?: string;
    user_platforms?: string[];
    session_id?: string;
    session_email?: string;
    session_phone?: string;
    fcm_token?: string;
    ts: Date;
    ts64?: number;
    funnel?: string;
    funnel_node?: string;
    funnel_node_from?: string;
    utm_source?: string;
    utm_content?: string;
    utm_medium?: string;
    utm_campaign?: string;
    utm_term?: string;
    action?: string;
    action_params?: string;
    action_param1?: string;
    action_param2?: string;
    action_param3?: string;
    action_param1_float?: number;
    action_param2_float?: number;
    action_param3_float?: number;
    action_param4_float?: number;
    action_param1_int?: number;
    action_param2_int?: number;
    action_param3_int?: number;
    action_param1_arrstr?: string[];
    action_param2_arrstr?: string[];
    action_param3_arrstr?: string[];
    action_param1_uint32arr?: number[] | undefined;
    action_param1_mapstrstr?: Record<string, string> | undefined;
    action_param2_mapstrstr?: Record<string, string> | undefined;
    keys?: string[];
    values?: string[];
};
declare const GetAnalyticsConfigParamsSchema: import("core/heap/v2/heapSchemaTypes").HsAny<GetAnalyticsConfigParams>;
export type GetAnalyticsConfigParams = {
    nodes: NodeInfo[];
};
type NodeId = string;
declare const AnalyticsConfigSchema: import("core/heap/v2/heapSchemaTypes").HsAny<AnalyticsConfig>;
export type AnalyticsConfig = {
    conditionsMap?: Record<NodeId, NodeAnalyticsCondition>;
};
export type NodeAnalyticsCondition = QueryBuilderWhere | undefined | null | QueryBuilderWhere[];
type QueryBuilderWhere = {
    [eventField in MetricEventAvailableField]?: QueryBuilderWhere | (QueryBuilderWhere | undefined)[] | QueryBuilderWhereValue | QueryBuilderWhereExpression;
} & {
    ['$or']?: (QueryBuilderWhere | undefined)[];
    ['$and']?: (QueryBuilderWhere | undefined)[];
    ['$not']?: QueryBuilderWhere;
};
type QueryBuilderWhereExpression = {
    ['$gt']?: QueryBuilderWhereValue;
    ['$gte']?: QueryBuilderWhereValue;
    ['$lt']?: QueryBuilderWhereValue;
    ['$lte']?: QueryBuilderWhereValue;
    ['$eq']?: QueryBuilderWhereValue;
    ['$ne']?: QueryBuilderWhereValue;
    ['$in']?: QueryBuilderWhereValue[];
    ['$like']?: QueryBuilderWhereValue;
    ['$ilike']?: QueryBuilderWhereValue;
};
type QueryBuilderWhereValue = string | number | boolean | null | undefined;
type MetricEventAvailableField = 'urlPath' | 'uid' | 'sid' | 'url' | 'referer' | 'user_agent' | 'ip' | 'title' | 'screen_width' | 'screen_height' | 'screen_pixel_ratio' | 'location_country' | 'location_region' | 'location_time_zone' | 'location_city' | 'location_coordinates_latitude' | 'location_coordinates_longitude' | 'ua_client_type' | 'ua_client_name' | 'ua_client_version' | 'ua_device_type' | 'ua_device_brand' | 'ua_device_model' | 'ua_os_name' | 'ua_os_version' | 'ua_os_platform' | 'ua_bot_name' | 'ua_bot_category' | 'os_name' | 'device_name' | 'request_type' | 'auth_id' | 'auth_type' | 'auth_key' | 'auth_first_name' | 'auth_last_name' | 'auth_lang' | 'user_id' | 'user_type' | 'user_roles' | 'user_account_role' | 'user_status' | 'user_expires_at' | 'user_first_name' | 'user_last_name' | 'user_icon_image' | 'user_phone' | 'user_email' | 'user_platforms' | 'session_id' | 'session_email' | 'session_phone' | 'ts' | 'ts64' | 'funnel' | 'funnel_node' | 'funnel_node_from' | 'utm_source' | 'utm_content' | 'utm_medium' | 'utm_campaign' | 'utm_term' | 'action' | 'action_params' | 'action_param1' | 'action_param2' | 'action_param3' | 'action_param1_float' | 'action_param2_float' | 'action_param3_float' | 'action_param4_float' | 'action_param1_int' | 'action_param2_int' | 'action_param3_int' | 'action_param1_arrstr' | 'action_param2_arrstr' | 'action_param3_arrstr' | 'action_param1_uint32arr' | 'action_param1_mapstrstr' | 'action_param2_mapstrstr' | 'keys' | 'values';
declare const GetClientConfigParamsSchema: import("core/heap/v2/heapSchemaTypes").HsAny<GetClientConfigParams>;
export type GetClientConfigParams = {
    node: NodeInfo;
};
declare const NodeClientConfigSchema: import("core/heap/v2/heapSchemaTypes").HsAny<NodeClientConfig>;
export type NodeClientConfig = {
    agentsConfig?: NodeAgentsConfig;
};
export interface NodeSettingsProps<Settings = any> {
    setOnSave: (func: () => Promise<void>) => void;
    settings: Accessor<Settings>;
    saveToNode: (data: Partial<Settings>) => void;
    sceneChannels: {
        id: string
        externalId?: string
        source: string
        title: string
        description?: string
        active?: boolean
        username?: string
    }[];
}
declare const NodeActionResultSchema: import("core/heap/v2/heapSchemaTypes").HsAny<NodeActionResult>;
export type NodeActionResult = {
    success: false;
    message: string;
    nextEventParams?: never;
    nextEventRegistered?: never;
    stopActionsChain?: never;
    data?: never;
} | {
    success: true;
    nextEventParams?: MetricEventData;
    nextEventRegistered?: boolean;
    stopActionsChain?: boolean;
    data?: Record<string, JSONValue> | string | number | boolean;
    message?: never;
};
declare const RunNodeActionsParamsSchema: import("core/heap/v2/heapSchemaTypes").HsAny<RunNodeActionsParams>;
export type RunNodeActionsParams<Settings = any, Event = ReactionsConfig['normalizedEventParams']> = {
    agentsByType: Record<string, AgentInfo>;
    eventRaw: MetricEventRecord;
    eventData: Event;
    node: NodeInfo;
    transition: {
        id: string;
        title: string;
        from: string;
        to: string;
        scene: string;
        options: Record<string, any>;
        isRed?: boolean;
    };
    primaryAgent?: AgentInfo;
    settings: Settings;
    sceneChannels?: SceneChannel[];
    agentIds: string[];
    agentsVisit: ModelingAgentVisit;
};
type ModelingAgentVisit = {
  id: string;
  mainAgent: string;
  rootAgent: string;
  agents: string[];
  node: string;
  scene: string;
  startedAt: Date;
  visitedAt: Date;
  isValid: boolean;
  invalidReason?: 'required-agent' | 'path' | 'circular' | 'duplicate';
  inputTransition?: string;
  previousNode?: string;
};
type AgentInfo = {
    id: string;
    type: string;
    externalId: string;
    isTerminated: boolean;
    props: Record<string, any>;
    mainAgentId: string;
    parentAgentIds: string[];
    displayName: string;
};
type MetricEventData = {
    ts?: Date;
    ts64?: number;
    title?: string;
    user: undefined | {
        id: string;
        type: 'Anonymous' | 'Real' | 'Bot';
        firstName?: string | undefined;
        lastName?: string | undefined;
        accountRole?: string | undefined;
        image?: string | undefined;
        phone?: string | undefined;
        email?: string | undefined;
    };
    session: undefined | {
        id: string | undefined;
        phone?: string | undefined;
        email?: string | undefined;
    };
    uid: string | undefined;
    sid: string | undefined;
    gcVisitId: number | undefined;
    gcVisitorId: number | undefined;
    gcSessionId: number | undefined;
    url: string;
    hostname: string;
    ip: string | undefined;
    client?: {
        title: string | undefined;
        referrer?: string | undefined;
        userAgent?: string | undefined;
        screenWidth?: number | undefined;
        screenHeight?: number | undefined;
        screenPixelRatio?: number | undefined;
    };
    location?: {
        country?: string | undefined;
        region?: string | undefined;
        timeZone?: string | undefined;
        city?: string | undefined;
        latitude?: number | undefined;
        longitude?: number | undefined;
    };
    query?: {
        utm_funnel?: string | undefined;
        utm_node?: string | undefined;
        utm_node_from?: string | undefined;
        utm_action?: string | undefined;
        utm_action_params?: string | undefined;
        utm_action_param1?: string | undefined;
        utm_action_param2?: string | undefined;
        utm_action_param3?: string | undefined;
        utm_action_param1_float?: number | undefined;
        utm_action_param2_float?: number | undefined;
        utm_action_param3_float?: number | undefined;
        utm_action_param4_float?: number | undefined;
        utm_action_param1_int?: number | undefined;
        utm_action_param2_int?: number | undefined;
        utm_action_param3_int?: number | undefined;
    };
    funnel?: string | undefined;
    funnel_node?: string | undefined;
    funnel_node_from?: string | undefined;
    action?: string | undefined;
    action_params?: string | undefined;
    action_param1?: string | undefined;
    action_param2?: string | undefined;
    action_param3?: string | undefined;
    action_param1_float?: number | undefined;
    action_param2_float?: number | undefined;
    action_param3_float?: number | undefined;
    action_param4_float?: number | undefined;
    action_param1_int?: number | undefined;
    action_param2_int?: number | undefined;
    action_param3_int?: number | undefined;
    action_param1_arrstr?: string[] | undefined;
    action_param2_arrstr?: string[] | undefined;
    action_param3_arrstr?: string[] | undefined;
    action_param1_uint32arr?: number[] | undefined;
    action_param1_mapstrstr?: Record<string, string> | undefined;
    action_param2_mapstrstr?: Record<string, string> | undefined;
    utm_source?: string | undefined;
    utm_medium?: string | undefined;
    utm_content?: string | undefined;
    utm_campaign?: string | undefined;
    utm_term?: string | undefined;
    keys?: string[];
    values?: string[];
    param_clrt?: string;
    clrt_type?: string;
    clrt_campaign_id?: string;
    clrt_ad_id?: string;
    clrt_run_id?: number;
};
type SceneChannel = {
  id: string
  externalId?: string
  isActive?: boolean
};
export { };

