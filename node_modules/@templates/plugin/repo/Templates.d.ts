export declare const Templates: import("services/ugc-runner/runtime/heap/UgcHeapTableRepo").UgcHeapTableRepo<{
    url: import("core/heap/v2/heapSchemaTypes").HsString<string>;
    name: import("core/heap/v2/heapSchemaTypes").HsObject<{
        ru: /*elided*/ any;
        en: /*elided*/ any;
        kk: /*elided*/ any;
    }>;
    description: import("core/heap/v2/heapSchemaTypes").HsObject<{
        ru: /*elided*/ any;
        en: /*elided*/ any;
        kk: /*elided*/ any;
    }>;
    type: import("core/heap/v2/heapSchemaTypes").HsUnion<[import("core/heap/v2/heapSchemaTypes").HsLiteral<"app">, import("core/heap/v2/heapSchemaTypes").HsLiteral<"hook">, import("core/heap/v2/heapSchemaTypes").HsLiteral<"table">, import("core/heap/v2/heapSchemaTypes").HsLiteral<"html">, import("core/heap/v2/heapSchemaTypes").HsLiteral<"bot">, import("core/heap/v2/heapSchemaTypes").HsLiteral<"start">]>;
    accountType: import("core/heap/v2/heapSchemaTypes").HsUnion<[import("core/heap/v2/heapSchemaTypes").HsLiteral<"chatium">, import("core/heap/v2/heapSchemaTypes").HsLiteral<"getcourse">, import("core/heap/v2/heapSchemaTypes").HsLiteral<"any">]>;
    slug: import("core/heap/v2/heapSchemaTypes").HsOptional<import("core/heap/v2/heapSchemaTypes").HsString<string>>;
    navigate: import("core/heap/v2/heapSchemaTypes").HsOptional<import("core/heap/v2/heapSchemaTypes").HsString<string>>;
    preview: import("core/heap/v2/heapSchemaTypes").HsOptional<import("core/heap/v2/heapSchemaTypes").HsString<string>>;
    language: import("core/heap/v2/heapSchemaTypes").HsOptional<import("core/heap/v2/heapSchemaTypes").HsString<string>>;
    image: import("core/heap/v2/heapSchemaTypes").HsOptional<import("core/heap/v2/heapSchemaTypes").HsImageFile>;
    isPublished: import("core/heap/v2/heapSchemaTypes").HsNonRequired<import("core/heap/v2/heapSchemaTypes").HsBoolean>;
}>;
export declare function getAllTemplates(ctx: app.Ctx): Template[];
export interface Template {
    type: 'app' | 'hook' | 'html' | 'table' | 'bot' | 'start';
    accountType: 'chatium' | 'getcourse' | 'any';
    url: string;
    name: string;
    description?: string;
    slug?: string;
    navigate?: string;
    preview?: string;
    imageUrl?: string;
    settingsComponentData?: [{
        clientVersionUrl: string;
    }, string];
    isPublished?: boolean;
    extraData?: Record<string, any>;
    lordicon?: {
        name: string;
        colors?: string;
    };
}
