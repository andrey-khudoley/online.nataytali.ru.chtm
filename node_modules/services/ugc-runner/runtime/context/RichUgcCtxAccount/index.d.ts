import { ApiCallAction, AttachMediaAction, QueryParamsOption, apiCall, navigate } from 'lib/chatium-json'

declare type AccountUrlFn = {
  accountUrlParams: AccountUrlParams
  (path: string, options?: QueryParamsOption): string
}
interface AccountUrlParams {
  accountName: string
  accountHost: string
  accountPathPrefix: string
  pluginAppInfo?: UgcPluginAppUrlInfo
}
declare type HashMediaType = 'file' | 'video' | 'image' | 'audio'
interface StorageUploadOptions {
  /** upload a non-public file */
  protected?: boolean
  /** allow only these media types (supported: image | video | audio) */
  mediaType?: HashMediaType | HashMediaType[]
  /** allow only these content type pattern(s) */
  contentType?: string | string[]
  /** allow only these file extensions */
  extension?: string | string[]
  /** minimum file size in bytes */
  minBytes?: number
  /** maximum file size in bytes */
  maxBytes?: number
  /** custom auth session authorizing URL expiration time in seconds, default is a week */
  expiresInSeconds?: number
}
declare type AccountAuthType = 'Email' | 'Phone' | 'Multi'
interface UgcPluginAppUrlInfo {
  appSlug: string
  /** path to the application root directory */
  directoryPath: string
}
interface UgcCtxAccount {
  id: number
  name: string
  host: string
  authType: AccountAuthType
  /** @deprecated use host instead */
  externalHost: string | null
  publishedVersion: string | null
  metaHash: string
  pathPrefix: string
}
declare type LogLevel = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace' | 'unknown'
declare type UgcKvOpts = {
  [key: string]: string | number | undefined
}
declare type LogParams = {
  err?: Error
  kv?: UgcKvOpts
  json?: unknown
  level?: LogLevel
  msg?: string | number
}
declare type LogParamsNoMsg = Omit<LogParams, 'msg'>
/**
 * Same as RichAccount but for UGC context
 */
export declare class RichUgcAccount implements Omit<UgcCtxAccount, 'metaHash'> {
  private acc
  private richUgcCtx
  readonly id: number
  readonly name: string
  readonly host: string
  readonly pathPrefix: string
  readonly authType: AccountAuthType
  constructor(acc: UgcCtxAccount, richUgcCtx: RichUgcCtx)
  get externalHost(): string | null
  get publishedVersion(): string | null
  url: AccountUrlFn
  apiCall<P>(url: string, apiParams?: P, options?: Parameters<typeof apiCall>[2]): ApiCallAction<P>
  navigate(url: string, options?: Parameters<typeof navigate>[1]): ReturnType<typeof navigate>
  /** @deprecated use ctx.account.url(path) instead */
  externalUrl(path: string): string
  redirect(targetPath: string): never
  /**
   * Returns attachMedia action targeted to the proper chatium file-service url bound to the account
   */
  attachMedia(
    params: Omit<AttachMediaAction, 'type' | 'filePutUrl' | 'getPutUrl'> & Pick<StorageUploadOptions, 'protected'>,
  ): AttachMediaAction
  toJSON(): UgcCtxAccount
  log(params: LogParams): void
  log(msg: string | number, params?: LogParamsNoMsg): void
  log(msg: string | number, err?: Error): void
  log(err: Error): void
}
export declare const accountApiCall: (
  accountUrl: (url: string) => string,
) => <P>(url: string, apiParams?: P | undefined, options?: Parameters<typeof apiCall>[2]) => ApiCallAction<P>
export declare const accountNavigate: (
  accountUrl: (url: string) => string,
) => (url: string, options?: Parameters<typeof navigate>[1]) => ReturnType<typeof navigate>
export declare const accountUrl: (account: UgcCtxAccount | RichUgcAccount) => AccountUrlFn

export {}
