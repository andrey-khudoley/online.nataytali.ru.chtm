export type ConditionType = 'string' | 'number' | 'boolean' | 'date' | 'refbook';
export type ExpressionsOperation = 'and' | 'or';
export type Expression = Expressions<'and'> | Expressions<'or'> | Condition<'string'> | Condition<'number'> | Condition<'boolean'> | Condition<'date'> | Condition<'refbook'>;
export type Expressions<Operation extends ExpressionsOperation = ExpressionsOperation> = {
    operation: Operation;
    items: Expression[];
};
export type Condition<Type extends ConditionType = ConditionType> = {
    type: Type;
    left: ExpressionLeft;
    operation: ExpressionOperation<Type>;
    right: ExpressionRight<Type>;
};
export declare const expressionOperationsString: readonly ["==", "!=", "includes", "starts", "ends", "matchRegExp", "notMatchRegExp"];
export declare const expressionOperationsNumber: readonly ["==", "!=", ">", "<", ">=", "<="];
export declare const expressionOperationsBoolean: readonly ["==", "!="];
export declare const expressionOperationsDate: readonly ["==", "!=", ">", "<", ">=", "<=", "sameDay", "sameWeek", "sameMonth", "sameYear", "yesterday", "tomorrow"];
export declare const expressionOperationsRefbook: readonly ["==", "!="];
export type ExpressionOperation<Type extends ConditionType = ConditionType> = Type extends 'string' ? (typeof expressionOperationsString)[number] : Type extends 'number' ? (typeof expressionOperationsNumber)[number] : Type extends 'boolean' ? (typeof expressionOperationsBoolean)[number] : Type extends 'date' ? (typeof expressionOperationsDate)[number] : Type extends 'refbook' ? (typeof expressionOperationsRefbook)[number] : never;
export type ExpressionLeft = {
    key: string;
    title: string;
    data?: Record<string, unknown>;
};
export type TypedExpressionLeft = ExpressionLeft & {
    type: ConditionType;
    typeData?: Record<string, unknown>;
    group?: string;
};
export type ExpressionRight<Type extends ConditionType> = {
    key?: string;
    title?: string;
    value?: Type extends 'string' ? string : Type extends 'number' ? number : Type extends 'boolean' ? boolean : Type extends 'date' ? Date | string : Type extends 'refbook' ? string : never;
    data?: Record<string, unknown>;
};
export declare function isExpression(data: any): data is Expression;
export declare function isExpressions(data: any): data is Expressions<ExpressionsOperation>;
export declare function isExpressionsOr(data: any): data is Expressions<'or'>;
export declare function isExpressionsAnd(data: any): data is Expressions<'and'>;
export declare function isCondition(data: any): data is Condition<ConditionType>;
export declare function isConditionString(data: any): data is Condition<'string'>;
export declare function isConditionNumber(data: any): data is Condition<'number'>;
export declare function isConditionBoolean(data: any): data is Condition<'boolean'>;
export declare function isConditionDate(data: any): data is Condition<'date'>;
export declare function isConditionRefbook(data: any): data is Condition<'refbook'>;
export declare function convertConditionTypeValue(type: ConditionType, value: any): ExpressionRight<typeof type>['value'] | undefined;
